#!/bin/bash

# --------------------------------------------------------------------
# Passes into Notepad++/Wine the output of a command as the model...
#
# "
# <file path>/nppstub $(bash command)
# "
#
# Eg.:
#
# "
# <file path>/nppstub $(find ./ -name "*.py" -type f -exec grep -l 'some string' -- {} \;)
# "
# --------------------------------------------------------------------

F_PRESERVE_BLANK_LINES_R=""
f_preserve_blank_lines() {
    : 'Remove "single quotes" used to prevent blank lines being erroneously 
    removed.

    "single quotes" is used at the beginning and end of the strings to prevent 
    blank lines with no other characters in the sequence being erroneously 
    removed! We do not know the reason for this side effect! This problem 
    occurs, for example, in commands that involve "sed" and "awk". When the 
    text entry for "sed" ("sed -i") is a file the problem addressed here does 
    not occur.

    Args:
        STR_TO_TREAT_P (str): String to be treated.

    Returns:
        F_PRESERVE_BLANK_LINES_R (str): String treated.
    '

    F_PRESERVE_BLANK_LINES_R=""
    STR_TO_TREAT_P=$1
    STR_TO_TREAT_P=${STR_TO_TREAT_P%?}
    F_PRESERVE_BLANK_LINES_R=${STR_TO_TREAT_P#?}
}

# [Ref.: https://stackoverflow.com/a/48551138/3223785]
F_SPLIT_R=()
f_split() {
    : 'It does a "split" into a given string and returns an array.

    Args:
        TARGET_P (str): Target string to "split".
        DELIMITER_P (Optional[str]): Delimiter used to "split". If not 
    informed the split will be done by spaces.

    Returns:
        F_SPLIT_R (array): Array with the provided string separated by the 
    informed delimiter.
    '

    F_SPLIT_R=()
    TARGET_P=$1
    DELIMITER_P=$2
    if [ -z "$DELIMITER_P" ] ; then
        DELIMITER_P=" "
    fi

    REMOVE_N=1
    if [ "$DELIMITER_P" == "\n" ] ; then
        REMOVE_N=0
    fi

    # NOTE: This was the only parameter that has been a problem so far! 
    # By Questor
    # [Ref.: https://unix.stackexchange.com/a/390732/61742]
    if [ "$DELIMITER_P" == "./" ] ; then
        DELIMITER_P="[.]/"
    fi

    if [ ${REMOVE_N} -eq 1 ] ; then

        # NOTE: Due to bash limitations we have some problems getting the 
        # output of a split by awk inside an array and so we need to use 
        # "line break" (\n) to succeed. Seen this, we remove the line breaks 
        # momentarily afterwards we reintegrate them. The problem is that if 
        # there is a line break in the "string" informed, this line break will 
        # be lost, that is, it is erroneously removed in the output! 
        # By Questor
        TARGET_P=$(awk 'BEGIN {RS="dn"} {gsub("\n", "3F2C417D448C46918289218B7337FCAF"); printf $0}' <<< "${TARGET_P}")

    fi

    # NOTE: The replace of "\n" by "3F2C417D448C46918289218B7337FCAF" results 
    # in more occurrences of "3F2C417D448C46918289218B7337FCAF" than the 
    # amount of "\n" that there was originally in the string (one more 
    # occurrence at the end of the string)! We can not explain the reason for 
    # this side effect. The line below corrects this problem! By Questor
    TARGET_P=${TARGET_P%????????????????????????????????}

    SPLIT_NOW=$(awk -F "$DELIMITER_P" '{for(i=1; i<=NF; i++){printf "%s\n", $i}}' <<< "${TARGET_P}")

    while IFS= read -r LINE_NOW ; do
        if [ ${REMOVE_N} -eq 1 ] ; then

            # NOTE: We use "'" to prevent blank lines with no other characters 
            # in the sequence being erroneously removed! We do not know the 
            # reason for this side effect! By Questor
            LN_NOW_WITH_N=$(awk 'BEGIN {RS="dn"} {gsub("3F2C417D448C46918289218B7337FCAF", "\n"); printf $0}' <<< "'${LINE_NOW}'")
            f_preserve_blank_lines "$LN_NOW_WITH_N"
            LN_NOW_WITH_N="$F_PRESERVE_BLANK_LINES_R"

            F_SPLIT_R+=("$LN_NOW_WITH_N")
        else
            F_SPLIT_R+=("$LINE_NOW")
        fi
    done <<< "$SPLIT_NOW"
}

INPUT_FILES=""
SPACE_CTRL=""
INPUT_FILE_ACCUMULATOR=""
USE_DOT=0
f_split "$(echo -ne $@)" "/"
F_SPLIT_R_0=("${F_SPLIT_R[@]}")
F_SPLIT_R_1=()
TOTAL_0=${#F_SPLIT_R_0[*]}
INPUT_FILE_ACCUMULATOR=""
INPUT_FILE_ACCUMULATOR=""
WITHOUT_BAR_BEGINNING=0

for (( i=0; i<=$(( $TOTAL_0 -1 )); )) ; do

    # NOTE: Unfortunately the input can only be treated as string so that 
    # "INPUT_FILE" will receive invalid values if the folder paths informed 
    # have spaces! By Questor

    INPUT_FILE="${F_SPLIT_R_0[$i]}"
    if (( [[ "$INPUT_FILE" != "." ]] && [[ -n "$INPUT_FILE" ]] ) && [ ${i} -eq 0 ]) || [ ${TOTAL_0} -eq 1 ] ; then
    # NOTE: Treat when paths are relative and have no slash ("./")! By Questor

        INPUT_FILE_ACCUMULATOR="$(echo -ne $@)"
        WITHOUT_BAR_BEGINNING=1
    else
        if [ -n "$INPUT_FILE" ] ; then
            # NOTE: The logic in this "if" block allows us to handle situations 
            # where there are relative and absolute paths mixed in the list! 
            # By Questor

            if ( [[ "$INPUT_FILE" == "." ]] && [[ -z "$INPUT_FILE_ACCUMULATOR" ]] ) || [ ${USE_DOT} -eq 1 ] ; then
                INPUT_FILE_ACCUMULATOR="."
                USE_DOT=0
                ((i++))
            elif [[ "$INPUT_FILE" == *" ." ]] && (( i < $(( $TOTAL_0 -1 )) )) ; then
                # NOTE I: "[[" and "]]" means that bash doesn't 
                # "parameter substitution"/
                # "manipulating and/or expanding variables"! By Questor
                # NOTE II: "(( i < $(( $TOTAL_0 -1 )) ))" exists because there may 
                # be file name with a dot at the last position (F_SPLIT_R_0)!
                # By Questor

                f_split "$INPUT_FILE" " ."
                F_SPLIT_R_1=("${F_SPLIT_R[@]}")

                # NOTE III: The space at the end is only to ensure according to 
                # the rules of this script that it is a correct path to a file and 
                # not a partial path interpreted as a valid path in a later 
                # conditional! By Questor
                INPUT_FILE_ACCUMULATOR=$INPUT_FILE_ACCUMULATOR"/"${F_SPLIT_R_1[0]}" "

                USE_DOT=1
            else
                INPUT_FILE_ACCUMULATOR=$INPUT_FILE_ACCUMULATOR"/"$INPUT_FILE
                ((i++))
            fi
        else
            ((i++))
            continue
        fi
    fi

    # NOTE: We build up the files path part-to-part (concatenating strings) 
    # to obtain a valid path as the checking we do below! By Questor
    if ! [ -d "$INPUT_FILE_ACCUMULATOR" ] ; then
        # NOTE: Avoid opening folders as files! By Questor

        if ( [ -f "${INPUT_FILE_ACCUMULATOR%?}" ] ) || ( ( (( i == $TOTAL_0 )) || [ ${WITHOUT_BAR_BEGINNING} -eq 1 ] ) && [ -f "$INPUT_FILE_ACCUMULATOR" ] ) ; then

            # NOTE: Checks whether is or isn't an absolute path! By Questor
            if [[ "$INPUT_FILE_ACCUMULATOR" == "/"* ]] ; then
                # NOTE: In case of absolute path! By Questor

                FILE_NOW="$INPUT_FILE_ACCUMULATOR"
            else

                # NOTE: Transforms a relative in absolute path (wine need)! 
                # By Questor
                FILE_NOW=$(realpath "$INPUT_FILE_ACCUMULATOR")

            fi

            # NOTE: Adds the default drive letter (wine need)! By Questor
            FILE_NOW=$(winepath -w "$FILE_NOW")

            # NOTE: Escapes the bars and spaces! Conforms to the Wine 
            # standards! By Questor
            FILE_NOW=$(echo $FILE_NOW | sed 's,\\,\\\\,g' | sed 's, ,\\ ,g')

            # NOTE: Files to pass as an argument to Notepad++! By Questor
            INPUT_FILES=$INPUT_FILES$SPACE_CTRL$FILE_NOW
            SPACE_CTRL=" "

            INPUT_FILE_ACCUMULATOR=""

        fi

    # NOTE: We use '2>/dev/null' to suppress unwanted prints! By Questor
    fi 2>/dev/null

    if [ ${WITHOUT_BAR_BEGINNING} -eq 1 ] ; then
        break
    fi

done

# NOTE: To be able to execute as "root" is necessary to create a "wineprefix" 
# inside "/root" and installs "Notepad++" inside it! By Questor

# NOTE: Runs Wine as the place where it's! By Questor
if [[ -e "$HOME/.PlayOnLinux/wineprefix/npp/drive_c/Program Files/Notepad++/notepad++.exe" ]]; then

    # NOTE I: The eval is a strategy to get pass the arguments to the 
    # Wine/Notepad++! Use "2> /dev/null 1> /dev/null" is a strategy to detach 
    # the process! By Questor
    # NOTE II: Start Wine with PLayOnLInux! By Questor
    if [[ $EUID -ne 0 ]]; then
        eval "export POL_IgnoreWineErrors=True && /usr/share/playonlinux/playonlinux --run \"notepad++\" -multiInst -nosession $INPUT_FILES 2> /dev/null 1> /dev/null &"
    else
    # NOTE: Allows "Notepad++" to run as "root"! By Questor

        eval "env WINEARCH=win32 WINEPREFIX=\"/root/npp_root\" wine \"C:/Program Files/Notepad++/Notepad++.exe\" -multiInst -nosession $INPUT_FILES 2> /dev/null 1> /dev/null &"

    fi

elif [[ -e "$HOME/.wine/drive_c/Program Files/Notepad++/notepad++.exe" ]]; then

    # NOTE I: The eval is a strategy to get pass the arguments to the 
    # Wine/Notepad++! Use "2> /dev/null 1> /dev/null" is a strategy to detach 
    # the process! By Questor
    # NOTE II: Default method to start Wine! By Questor
    eval "env WINEARCH=win32 WINEPREFIX=\"$HOME/.wine\" wine \"C:/Program Files/Notepad++/Notepad++.exe\" -multiInst -nosession $INPUT_FILES 2> /dev/null 1> /dev/null &"

else
    echo "> ---------------------------------------------------"
    echo "ERROR: Notepad++.exe can't be found!"
    echo "< ---------------------------------------------------"
fi
